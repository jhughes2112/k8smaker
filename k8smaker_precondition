#!/bin/bash
# Do not run this directly!  Rather, any code you want to run on control AND worker nodes
# can be added here, as it runs before the cluster is initialized or before the worker joins.

if [[ $(whoami) == "root" ]]; then
   echo "Must not run as root."
   exit 1
fi

# Get rid of anything that might cause conflicts, old versions, etc
sudo systemctl stop kubelet
sudo rm -rf /etc/kubernetes /var/lib/etcd /var/lib/kubelet
sudo apt-get update >/dev/null 2>&1
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 gnupg-agent
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update 
sudo apt-get install containerd.io=1.2.13-2 docker-ce=5:19.03.11~3-0~ubuntu-$(lsb_release -cs) docker-ce-cli=5:19.03.11~3-0~ubuntu-$(lsb_release -cs)
sudo tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
sudo mkdir -p /etc/systemd/system/docker.service.d

# If there's a device at $SSD, we set it up to mount at the DATAFOLDER location.
if [[ -f $SSD ]]; then
   echo "$SSD not found"
else
   SSDUUID=$(lsblk $SSD -o UUID -n | tr '\n' ' ' | cut -c 2-37)
   echo "Found $SSDUUID"
   sudo mkdir -p "$DATAFOLDER"
   if grep -q "$SSDUUID" /etc/fstab; then
      echo "Disk is already in fstab."
   else
      echo "UUID=$SSDUUID  $DATAFOLDER  ext4  defaults  0  2" | sudo tee -a /etc/fstab
      echo "Added $SSD to /etc/fstab"
   fi
   sudo mount -a
fi

# Make sure that $DATAFOLDER/docker is where things are stored rather than /var/lib/docker 
SEDCMD="sed -i 's%^ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock.*$%ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -g $DATAFOLDER/docker%g' /lib/systemd/system/docker.service"
echo "Adding $DATAFOLDER to docker working folder"
sudo eval "$SEDCMD"
sudo mkdir -p "$DATAFOLDER"/docker

# make etcd a symlink to the data folder
sudo ln -s "$DATAFOLDER"/etcd /var/lib/etcd

# add a DNS entry so we can do HA control node load balancing if we want to later.
if grep -q "$CONTROLNODEIP control-nodes" /etc/hosts; then
   echo "/etc/hosts already setup"
else
   echo "$CONTROLNODEIP control-nodes" | sudo tee -a /etc/hosts
   echo "Added $CONTROLNODEIP control-nodes entry to /etc/hosts"
fi

# Performance improves if you disable Transparent Huge Pages.
sudo apt-get install -y hugepages
sudo tee /etc/rc.local <<EOF
#!/bin/bash
hugeadm --thp-never
EOF
sudo chmod a+x /etc/rc.local
sudo hugeadm --thp-never

# Swapfile must be off to run k8s properly
sudo swapoff -a >/dev/null 2>&1 || true
sudo sed -i '/^\/swapfile/s/^/#/' /etc/fstab

# Configure prerequisites for Kubernetes
sudo tee /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo tee /etc/apt/sources.list.d/kubernetes.list <<EOF
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

# Check current versions available of these packages like this: apt-cache madison kubelet 
sudo apt-get update && apt-get install -y kubelet=1.18.4-00 kubeadm=1.18.4-00 kubectl=1.18.4-00
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl daemon-reload
sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl restart kubelet

# Add tab completion to bash for kubectl
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl
