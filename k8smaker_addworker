#!/bin/bash

if [[ $(whoami) = "root" ]]; then
   echo "Must not run as root."
   exit 1
fi

source ./k8smaker_config

if [[ $1 = '' ]]; then
   echo "Pass IP or hostname of the worker node as the first argument:"
   echo "./k8smaker_addworker worker1.local"
   exit 1
fi

mkdir -p ~/"$CLUSTERNAME"
ADDSCRIPT=~/"$CLUSTERNAME/k8smaker_addworker_$1"

# this picks up your external facing IP address and hostname
CONTROLNODEIP=$(ip route get 8.8.8.8 | awk '{print $7}')
THISHOSTNAME=$(hostname)
echo "ControlNode1 is $THISHOSTNAME at IP $CONTROLNODEIP"
echo "Worker is $SSHUSERNAME@$1"
echo "Script stored in $ADDSCRIPT"

# Delete an existing k8s install while leaving Docker alone.  Doesn't get rid of all the extra things we did, but those aren't harmful to reinstalling.
echo "You have 5 seconds before this script remotely deletes all Kubernetes and Etcd data.  Control-C To Abort!"
sleep 5

# configure us to be able to login remotely without a password
ssh-copy-id -f -i "$HOME/.ssh/$CLUSTERNAME.pub" "$SSHUSERNAME"@"$1"

# generate the script we want to run on the remote machine
echo "#!/bin/bash" >"$ADDSCRIPT"
echo "CONTROLNODEIP=$CONTROLNODEIP" >>"$ADDSCRIPT"
cat ./k8smaker_config >>"$ADDSCRIPT"
cat ./k8smaker_precondition >>"$ADDSCRIPT"
DISCOVERYTOKEN=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')
echo "sudo kubeadm join control-nodes:6443 --token $BOOTSTRAPTOKEN --discovery-token-ca-cert-hash sha256:$DISCOVERYTOKEN" >>"$ADDSCRIPT"
echo "sudo usermod -aG docker $SSHUSERNAME" >>"$ADDSCRIPT"
echo "mkdir -p ~/.kube" >>"$ADDSCRIPT"
chmod a+x "$ADDSCRIPT"

# copy the script to the new node and run it
scp -i "$HOME/.ssh/$CLUSTERNAME" "$ADDSCRIPT" "$SSHUSERNAME"@"$1":~/"k8smaker_addworker_$1"
ssh -t -i "$HOME/.ssh/$CLUSTERNAME" "$SSHUSERNAME"@"$1" ~/"k8smaker_addworker_$1"

# Configure kubectl for each worker node
scp -i "$HOME/.ssh/$CLUSTERNAME" ~/.kube/config "$SSHUSERNAME"@"$1":~/.kube/config

# give the new node the role of 'worker'
kubectl label nodes "$1" --overwrite "node-role.kubernetes.io/worker="

# Once you add a worker node, we mark the control plane as non-schedulable, since we specified for it to not handle work.
if [[ "$CONTROLISWORKER" -eq "0" ]]; then
   kubectl label nodes "$THISHOSTNAME" --overwrite "node-role.kubernetes.io/master=NoSchedule"
   kubectl taint nodes "$THISHOSTNAME" node-role.kubernetes.io/master='':NoSchedule
   echo "$THISHOSTNAME will no longer be a worker."
else
   kubectl label nodes "$THISHOSTNAME" --overwrite "node-role.kubernetes.io/master="
   if kubectl get node/"$THISHOSTNAME" -o custom-columns=TAINTS:.spec.taints --no-headers 2>&1 | grep -q "node-role.kubernetes.io/master"; then
      kubectl taint nodes "$THISHOSTNAME" node-role.kubernetes.io/master:NoSchedule-
   fi
   echo "$THISHOSTNAME will stay as a worker."
fi
